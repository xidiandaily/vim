" ========================================================================
"公孙小龙(chiyl) 的 vimrc
"我的联系方式:xidiandaily (AT) gmail (DOT) COM
"
"
" 许可：GPLv3
" ========================================================================
" 其他文件
runtime vimrc_example.vim
runtime macros/matchit.vim

source $VIMPROJ/3rd/init.dein.vim

if(has("win32") || has("win95") || has("win64") || has("win16"))
    set shell=C:\windows\system32\cmd.exe
    let g:iswindows=1
else
    let g:iswindows=0
endif

"定义默认的调用函数
function UPFILE_default()
    echohl WarningMsg | echom "upload file tool has not build for this project type ;-0" | echohl None
    return "error"
endfunction

function CSTAG_default()
    echohl WarningMsg | echom " I don't know how to generate the CSTAG file for this project type ;-0" | echohl None
    return "error"
endfunction

function ASTYLE_default()
    echohl WarningMsg | echom " I don't know how to astyle this file for this project type ;-0" | echohl None
    return "error"
endfunction

function SetProjType()
    let choice=confirm("Set Project Type", "&cpp\n&pkm\n&php\n&&Cancel",4)
    if choice==1
        "初始化CPP环境
        source  $VIMPROJ/Tool/InitCPP.vim
        let g:proj_type="cpp"
        call InitCPP()

        source  $VIMPROJ/Tool/SwitchDir.vim
        let s:path=getcwd()
        call SwitchDir(s:path)
    elseif choice==2
        "初始化PKM环境
        source  $VIMPROJ/Tool/InitPkm.vim
        let g:proj_type="pkm"
        call InitPkm()

        source  $VIMPROJ/Tool/SwitchDir.vim
        let s:path=getcwd()
        call SwitchDir(s:path)
    elseif choice==3
        source  $VIMPROJ/Tool/InitPHP.vim
        let g:proj_type="php"
        call InitPHP()

        source  $VIMPROJ/Tool/SwitchDir.vim
        let s:path=getcwd()
        call SwitchDir(s:path)
    endif
endfunction

"定义取用自定义函数（根据项目类型做出区别）名称接口
"定义项目配置时候需要使用的（全局）变量
let g:proj_type="default"
let g:chiylown_func_dict={}
function g:chiylown_func_dict.getprojtypefunc(functype) dict
    if(!has_key(self,a:functype))
        echohl WarningMsg | echom "don't know functype:".a:functype | echohl None
        return ""
    endif
    if(!has_key(self[a:functype],g:proj_type))
        return get(self[a:functype],"default","error")
    else
        return get(self[a:functype],g:proj_type,"error")
    endif
endfunction

let g:chiylown_func_dict["UPFILE"]={"default":"UPFILE_default"}
let g:chiylown_func_dict["CSTAG"]={"default":"CSTAG_default"}
let g:chiylown_func_dict["ASTYLE"]={"default":"ASTYLE_default"}

"禁用vi兼容模式（原始的vi功能太少了，没必要考虑兼容） 
set nocompatible
""开启文件检测,使得 snipMate 能够正确加载
:filetype on

"set相关
set nobackup
set rnu "自动显示行号
set nowrap "不自动换行
set noundofile "不产生 un~ 文件
set sw=4 "将shiftwidth设为4
set ts=4 "将tabstop设为4
"字体的设置
if(g:iswindows==1)
    set guifont=BitstreamVeraSansMono_NF:h9:cANSI "记住空格用下划线代替哦
    "set gfw=幼圆:h10:cGB2312
else 
    set guifont=Bitstream_Vera_Sans_Mono_Nerd_Font_Complete:h14
endif
set shiftwidth=4 
set softtabstop=4 
set tabstop=4 "让一个tab等于4个空格
set autoindent    "always set autoindenting on
set smartindent   "set smart indent
set smarttab      "use tabs at the start of a line, spaces elsewhere
set expandtab
"set tw=80    "宽度为80时自动换行
"set fo+=Mm   "中文宽度80时也自动换行
set colorcolumn=80
colorscheme lucius
au BufNewFile,BufRead *.t2t set ft=txt2tags
" SystemTap scripts
au BufNewFile,BufRead *.stp			set ft=stap
set fileencodings=utf-8,cp936,gb2312,gbk,gb18030
set encoding=utf-8
set fenc=utf-8
language message zh_CN.utf-8
"解决菜单乱码 
source $VIMRUNTIME/delmenu.vim 
source $VIMRUNTIME/menu.vim

"vim 8.0 更改了 default.vim的 so 配置，导致 zt/zb 不到底不到顶,修复之
"http://stackoverflow.com/questions/40264417/cursor-does-not-go-to-top-or-bottom-of-window-in-gvim-8
set scrolloff=0

"Tlist设置
let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行
let Tlist_Use_Right_Window=0 "让窗口显示在右边，0的话就是显示在左边
let Tlist_Show_One_File=0 "让taglist可以同时展示多个文件的函数列表，如果想只有1个，设置为1
let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏
let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个分割窗口时，自动推出vim
let Tlist_Process_File_Always=0 "不是一直实时更新tags，因为没有必要
let Tlist_Inc_Winwidth=0
"配置NERDTree
"let NERDChristmasTree=1						" more colorful
let g:NERDTreeWinPos="right"					" put NERDTree at right
let g:NERDTreeWinSize=45						" set size
let g:NERDTreeShowLineNumbers=0				" show line number
"let g:NERDTreeDirArrowExpandable = '+'
"let g:NERDTreeDirArrowCollapsible = '-'
"let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
"autocmd FileType nerdtree setlocal nolist
set ambiwidth=double



"配置C.vim doxygen enable
let g:C_UseTool_doxygen = 'yes'

"配置pdv(PHP Documentor for VIM)的属性
let g:pdv_template_dir = $VIM."/vimfiles/bundle/pdv/templates_snip"
nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>

"map相关
"更新TAG
map <C-F9> :set encoding=utf-8 \| language message zh_CN.utf-8 \| set fenc=utf-8<CR>
map <C-F8> :set encoding=cp936 \| language message cp936 \| set fenc=cp936<CR>
map <F7> :echo call(function(g:chiylown_func_dict.getprojtypefunc("UPFILE")),[])<CR>
"map <F10> :echo call(function(g:chiylown_func_dict.getprojtypefunc("ASTYLE")),[])<CR>
map <F12> ::echo call(function(g:chiylown_func_dict.getprojtypefunc("CSTAG")),[])<CR>
map <F5> :call SetProjType() <CR>
"echo g:chiylown_func_dict.getprojtypefunc("UPFILE")
"更新函数列表
map Tl :silent! Tlist<CR> "按下F3就可以呼出了
map NT :NERDTree<CR>
"easy-aligin
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"Previm
augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END
if(has("mac"))
    "因为MAC 下Chrome禁用了 file://协议下加载 js 的请求，只能改成Safari
    let g:previm_open_cmd = 'open -a Safari'
endif

source $VIMPROJ/vimrc/option.vim

"marvim
" to change the macro storage location use the following 
let marvim_store = $VIMPROJ."/../vimfiles/bundle/marvim/examples"
"let marvim_find_key = '<Space>' " change find key from <F2> to 'space'
"let marvim_store_key = 'ms'     " change store key from <F3> to 'ms'
"let marvim_register = 'c'       " change used register from 'q' to 'c'
let marvim_prefix = 0           " disable default syntax based prefix

source $VIMPROJ/../vimfiles/bundle/marvim/marvim.vim   " omit if marvim.vim is in the plugin dir

"自动命令
"其他命令
"最后
call pathogen#infect()
