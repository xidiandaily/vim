" ========================================================================
"公孙小龙(chiyl) 的 vimrc
"我的联系方式:xidiandaily (AT) gmail (DOT) COM
"
"
" 许可：GPLv3
" ========================================================================
" 其他文件
let s:plugin_path = escape(expand('<sfile>:p:h'), '\')
runtime vimrc_example.vim
runtime macros/matchit.vim

source $VIMPROJ/3rd/init.dein.vim

if(has("win32") || has("win95") || has("win64") || has("win16"))
    set shell=C:\windows\system32\cmd.exe
    let g:iswindows=1
else
    let g:iswindows=0
endif

"定义对齐xml函数
function IndentCodeXml()
python << EOF
import vim
import re

buf = vim.current.buffer
(lnum1, col1) = buf.mark('<')
(lnum2, col2) = buf.mark('>')
lines = vim.eval('getline({}, {})'.format(lnum1, lnum2))
for l in lines:
    if "\t" in l:
        vim.command(":'<,'>s/\t/    /g".format(lnum2-lnum1+1))
        break
for l in lines:
    if re.search("\"\s*\/\s*>",l):
        vim.command(":'<,'>s/\" *\/>/\"\/>/g".format(lnum2-lnum1+1))
        break
vim.command("normal {}gg".format(lnum1))
vim.command("normal {}==".format(lnum2-lnum1+1))
vim.command(":'<,'>EasyAlign*\ ")

lines = vim.eval('getline({}, {})'.format(lnum1, lnum2))
i=0
for l in lines:
    vim.command("normal {}gg".format(lnum1+i))
    i+=1
    if re.search("<struct ",l) or re.search("<macrosgroup ",l):
        vim.command("normal mn")
        vim.command("normal mm")
    elif re.search("<\/struct>",l) or re.search("<\/macrosgroup>",l):
        pass
    else:
        vim.command("normal mm")
        continue
    vim.command(":'n,'mEasyAlign*\ ")
    vim.command("normal j")
    vim.command("normal mn")
EOF
endfunction

"定义默认的调用函数
function UPFILE_default()
    echohl WarningMsg | echom "upload file tool has not build for this project type ;-0" | echohl None
    return "error"
endfunction

function CSTAG_default()
    echohl WarningMsg | echom " I don't know how to generate the CSTAG file for this project type ;-0" | echohl None
    return "error"
endfunction

function ASTYLE_default()
    echohl WarningMsg | echom " I don't know how to astyle this file for this project type ;-0" | echohl None
    return "error"
endfunction

function SetProjType()
    let choice=confirm("Set Project Type", "&cpp\n&pkm\n&php\n&&Cancel",4)
    if choice==1
        "初始化CPP环境
        source  $VIMPROJ/Tool/InitCPP.vim
        let g:proj_type="cpp"
        call InitCPP()

        source  $VIMPROJ/Tool/SwitchDir.vim
        let s:path=getcwd()
        call SwitchDir(s:path)
    elseif choice==2
        "初始化PKM环境
        source  $VIMPROJ/Tool/InitPkm.vim
        let g:proj_type="pkm"
        call InitPkm()

        source  $VIMPROJ/Tool/SwitchDir.vim
        let s:path=getcwd()
        call SwitchDir(s:path)
    elseif choice==3
        source  $VIMPROJ/Tool/InitPHP.vim
        let g:proj_type="php"
        call InitPHP()

        source  $VIMPROJ/Tool/SwitchDir.vim
        let s:path=getcwd()
        call SwitchDir(s:path)
    endif
endfunction

fu! GetExtVimrcByProjType()
    if has_key(environ(),'VIMPROJTYPE')
        let ext_vimrc_file_name=s:plugin_path.'\'.environ()['VIMPROJTYPE'].'._extvimrc'
        if filereadable(ext_vimrc_file_name)
            return ext_vimrc_file_name
        endif
    endif
    return ''
endfu

"暂时屏蔽相关插件,屏蔽插件放到 extvimrc 中进行分项目配置
let g:pathogen_disabled=[]

"根据项目类型加载对应的 _vimrc 配置
if GetExtVimrcByProjType() != ''
    sil! exe 'source '.GetExtVimrcByProjType()
endif

"call add(g:pathogen_disabled,'asyncomplete-lsp.vim')
"call add(g:pathogen_disabled,'asyncomplete.vim')
""call add(g:pathogen_disabled,'lua_omni_v0.17')
"call add(g:pathogen_disabled,'vim-lsp-settings')
"call add(g:pathogen_disabled,'vim-lsp')

"call add(g:pathogen_disabled,'tinytool.chiyl.vim')
"call add(g:pathogen_disabled,'my-gtags')
"call add(g:pathogen_disabled,'ctrlp-extensions.vim')
"call add(g:pathogen_disabled,'ctrlp-mymenu.vim')
"call add(g:pathogen_disabled,'ctrlp-py-matcher.vim')
"call add(g:pathogen_disabled,'ctrlp.chiyl.vim')
"call add(g:pathogen_disabled,'ctrlp.vim')
"call add(g:pathogen_disabled,'html5.vim')
"call add(g:pathogen_disabled,'htmlcomplete.vim')
"call add(g:pathogen_disabled,'javascript-libraries-syntax.vim')
"call add(g:pathogen_disabled,'jedi-vim')
"call add(g:pathogen_disabled,'jspc.vim')
"call add(g:pathogen_disabled,'luarefvim')
"call add(g:pathogen_disabled,'marvim')
"call add(g:pathogen_disabled,'nerdtree')
"call add(g:pathogen_disabled,'open-browser.vim')
"call add(g:pathogen_disabled,'pdv')
"call add(g:pathogen_disabled,'phpcomplete.vim')
"call add(g:pathogen_disabled,'previm')
"call add(g:pathogen_disabled,'python-mode')
"call add(g:pathogen_disabled,'tinytool.chiyl.vim')
"call add(g:pathogen_disabled,'ultisnips')
"call add(g:pathogen_disabled,'vim-easy-align')
"call add(g:pathogen_disabled,'vimcdoc')
"call add(g:pathogen_disabled,'vimerl-1.4.1')
"call add(g:pathogen_disabled,'vmustache')
"call add(g:pathogen_disabled,'wmgraphviz.vim')
call add(g:pathogen_disabled,'YouCompleteMe.vim')

"定义取用自定义函数（根据项目类型做出区别）名称接口
"定义项目配置时候需要使用的（全局）变量
let g:proj_type="default"
let g:chiylown_func_dict={}
function g:chiylown_func_dict.getprojtypefunc(functype) dict
    if(!has_key(self,a:functype))
        echohl WarningMsg | echom "don't know functype:".a:functype | echohl None
        return ""
    endif
    if(!has_key(self[a:functype],g:proj_type))
        return get(self[a:functype],"default","error")
    else
        return get(self[a:functype],g:proj_type,"error")
    endif
endfunction

let g:chiylown_func_dict["UPFILE"]={"default":"UPFILE_default"}
let g:chiylown_func_dict["CSTAG"]={"default":"CSTAG_default"}
let g:chiylown_func_dict["ASTYLE"]={"default":"ASTYLE_default"}

"禁用vi兼容模式（原始的vi功能太少了，没必要考虑兼容） 
set nocompatible
""开启文件检测,使得 snipMate 能够正确加载
:filetype on

"set相关
set nobackup
set rnu "自动显示行号
set nowrap "不自动换行
set noundofile "不产生 un~ 文件
set sw=4 "将shiftwidth设为4
set ts=4 "将tabstop设为4
set ff=unix  "将文件的文件格式设置为 fileformat unix
"字体的设置
if(g:iswindows==1)
    set guifont=BitstreamVeraSansMono_NF:h9:cANSI "记住空格用下划线代替哦
    "set guifont=BitstreamVeraSansMono_NF:h12:cANSI "记住空格用下划线代替哦
    "set gfw=幼圆:h10:cGB2312
else 
    set guifont=Bitstream_Vera_Sans_Mono_Nerd_Font_Complete:h14
endif
set shiftwidth=4 
set softtabstop=4 
set tabstop=4 "让一个tab等于4个空格
set autoindent    "always set autoindenting on
set smartindent   "set smart indent
set smarttab      "use tabs at the start of a line, spaces elsewhere
set expandtab
"set tw=80    "宽度为80时自动换行
"set fo+=Mm   "中文宽度80时也自动换行
set colorcolumn=80
colorscheme lucius
au BufNewFile,BufRead *.t2t set ft=txt2tags
" SystemTap scripts
au BufNewFile,BufRead *.stp			set ft=stap
set fileencodings=utf-8,cp936,gb2312,gbk,gb18030
set encoding=utf-8
set fenc=utf-8
language message zh_CN.utf-8
"解决菜单乱码 
source $VIMRUNTIME/delmenu.vim 
source $VIMRUNTIME/menu.vim

"BOM设置
if(g:iswindows==0)
    "删除BOM
    :set nobomb
endif

"vim 8.0 更改了 default.vim的 so 配置，导致 zt/zb 不到底不到顶,修复之
"http://stackoverflow.com/questions/40264417/cursor-does-not-go-to-top-or-bottom-of-window-in-gvim-8
set scrolloff=0

"Tlist设置
let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行
let Tlist_Use_Right_Window=0 "让窗口显示在右边，0的话就是显示在左边
let Tlist_Show_One_File=0 "让taglist可以同时展示多个文件的函数列表，如果想只有1个，设置为1
let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏
let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个分割窗口时，自动推出vim
let Tlist_Process_File_Always=0 "不是一直实时更新tags，因为没有必要
let Tlist_Inc_Winwidth=0
"配置NERDTree
"let NERDChristmasTree=1						" more colorful
let g:NERDTreeWinPos="right"					" put NERDTree at right
let g:NERDTreeWinSize=45						" set size
let g:NERDTreeShowLineNumbers=0				" show line number
"let g:NERDTreeDirArrowExpandable = '+'
"let g:NERDTreeDirArrowCollapsible = '-'
"let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
"autocmd FileType nerdtree setlocal nolist
set ambiwidth=double

" 关闭gvim在出错的时候的告警声音
set vb t_vb=

" 关闭gvim在出错的时候的闪屏提示
au GuiEnter * set t_vb=

"visincr
"将vimball的home设置在 vimfiles里面，用git管理起来，免得每次都要``so %``
let g:vimball_home=$VIMPROJ."/../vimfiles/"

"配置C.vim doxygen enable
let g:C_UseTool_doxygen = 'yes'

"配置pdv(PHP Documentor for VIM)的属性
let g:pdv_template_dir = $VIM."/vimfiles/bundle/pdv/templates_snip"
nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>

"map相关
"更新TAG
map <C-F9> :set encoding=utf-8 \| language message zh_CN.utf-8 \| set fenc=utf-8<CR>
map <C-F8> :set encoding=cp936 \| language message cp936 \| set fenc=cp936<CR>
map <F7> :echo call(function(g:chiylown_func_dict.getprojtypefunc("UPFILE")),[])<CR>
"map <F10> :echo call(function(g:chiylown_func_dict.getprojtypefunc("ASTYLE")),[])<CR>
map <F12> ::echo call(function(g:chiylown_func_dict.getprojtypefunc("CSTAG")),[])<CR>
map <F5> :call SetProjType() <CR>

"tab
nmap ts :tab split<CR>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>

"echo g:chiylown_func_dict.getprojtypefunc("UPFILE")
"更新函数列表
map Tl :silent! Tlist<CR> "按下F3就可以呼出了
map NT :NERDTree<CR>
"easy-aligin
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"commanline-edit
cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>

"lgame项目配置
nmap TP :call IndentCodeXml()<CR>

"Previm
augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END
if(has("mac"))
    "因为MAC 下Chrome禁用了 file://协议下加载 js 的请求，只能改成Safari
    let g:previm_open_cmd = 'open -a Safari'
endif

source $VIMPROJ/vimrc/option.vim

"marvim
" to change the macro storage location use the following 
let marvim_store = $VIMPROJ."/../vimfiles/bundle/marvim/examples"
"let marvim_find_key = '<C-S-m>' " change find key from <F2> to 'space'
"let marvim_store_key = 'ms'     " change store key from <F3> to 'ms'
"let marvim_register = 'c'       " change used register from 'q' to 'c'
let marvim_prefix = 0           " disable default syntax based prefix

source $VIMPROJ/../vimfiles/bundle/marvim/marvim.vim   " omit if marvim.vim is in the plugin dir

"Pymode

"Turn on the whole plugin
let g:pymode = 0

"Enable pymode folding
let g:pymode_folding = 0

"Enable pymode-motion
let g:pymode_motion = 0

"Binds keys to run python code
let g:pymode_run_bind = '<leader>r'

"jedi-vim
"Jedi is by default automatically initialized. If you don't want that I suggest you disable the auto-initialization in your .vimrc:
let g:jedi#auto_initialization = 1

"There are also some VIM options (like completeopt and key defaults) which are automatically initialized, but you can skip this:
let g:jedi#auto_vim_configuration = 1

"You can make jedi-vim use tabs when going to a definition etc:
let g:jedi#use_tabs_not_buffers = 0

"If you are a person who likes to use VIM-splits, you might want to put this in your .vimrc:
"This options could be "left", "right", "top", "bottom" or "winwidth". It will decide the direction where the split open.
let g:jedi#use_splits_not_buffers = ""

"Jedi automatically starts the completion, if you type a dot, e.g. str., if you don't want this:
let g:jedi#popup_on_dot = 1

"Jedi selects the first line of the completion menu: for a better typing-flow and usually saves one keypress.
let g:jedi#popup_select_first = 1

"Jedi displays function call signatures in insert mode in real-time, highlighting the current argument. The call signatures can be displayed as a pop-up in the buffer (set to 1, the default), which has the advantage of being easier to refer to, or in Vim's command line aligned with the function call (set to 2), which can improve the integrity of Vim's undo history.
let g:jedi#show_call_signatures = "1"
let g:jedi#completions_command = "<C-K>"

if g:iswindows==1
    " 设置默认的python库
    let g:jedi#environment_path = "E:\\env-python39"
endif

" ycm 配置
let g:ycm_echo_current_diagnostic = 0 " 关闭实时报错
let g:ycm_show_diagnostics_ui = 0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0

""ctrlp
""使用该选项来改变普通模式 |Normal| 下调用CtrlP的按键绑定: >
"let g:ctrlp_map = '<c-f>'
"
""设置当按下上面的按键绑定时，使用的默认打开命令: >
"let g:ctrlp_cmd = 'CtrlP'
"
""修改该选项为1，设置默认为按文件名搜索（否则为全路径）: >
"let g:ctrlp_by_filename = 0

"扩展是可选的。把它的名字添加到变量g:ctrlp_extensions中来开启扩展: >
"let g:ctrlp_extensions = ['tag', 'buffertag', 'undo', 'line', 'changes', 'bookmarkdir',
"            \ 'mycmd', 'menu', 'myp4', 'locur', 'lerror', 'lasync', 'lextdbtype',
"            \ 'lcomm', 'ldbtables', 'leventlog', 'lidip', 'lsscmd', 'lcscmd', 'lsvrid', 'lresource']
let g:ctrlp_extensions = ['mycmd', 'myp4', 'locur', 'lerror', 'lasync', 'lextdbtype',
            \ 'lcomm', 'ldbtables', 'leventlog', 'lidip', 'lsscmd', 'lcscmd', 'lsvrid', 'lresource',
            \ 'lswitch', 'tag', 'buffertag', 'lofies', 'loname', 'fixtag']

" mymenu 插件配置，将上面的 g:ctrlp_extensions 按照二级目录的方式进行选择
let g:ctrlp_mymenu_ext_groups={
            \ 'tag':['tag','bft', 'fixtag'],
            \ 'mycmd':['mycmd'],
            \ 'myp4':['myp4'],
            \ 'sme':['locur','lofies','loname'],
            \ 'ldb':['lcomm', 'ldbtables', 'leventlog', 'lidip', 'lsscmd', 'lcscmd', 'lswitch'],
            \ 'lgme':['lerror', 'lasync', 'lextdbtype',  'lsvrid', 'lresource']
            \ }


"自己定义的一些命令
let g:ctrlp_mycmd_cmds=[{'name':'nt','cmd':'NERDTree','desc':'NERDTree'}]

"ctrlp
let g:ctrlp_working_path_mode = 'a'

"使用该选项来改变普通模式 |Normal| 下调用CtrlP的按键绑定: >
let g:ctrlp_map = '<c-p>'

"设置当按下上面的按键绑定时，使用的默认打开命令: >
"let g:ctrlp_cmd = 'CtrlPMyMenu'
let g:ctrlp_cmd = 'CtrlPMenu'

"修改该选项为1，设置默认为按文件名搜索（否则为全路径）: >
let g:ctrlp_by_filename = 1

"当尝试打开一个文件时，如果它已经在某个窗口被打开，CtrlP会尝试跳到那个窗口，而
"不是新打开一个实例。: >
let g:ctrlp_switch_buffer = 'Et'

"采用更快的搜索实现
" PyMatcher for CtrlP
if !has('python')
    echo 'In order to use pymatcher plugin, you need +python compiled vim'
else
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

" Set delay to prevent extra search
let g:ctrlp_lazy_update = 350

" Do not clear filenames cache, to improve CtrlP startup
" You can manualy clear it by <F5>
let g:ctrlp_clear_cache_on_exit = 0

" Set no file limit, we are building a big project
let g:ctrlp_max_files = 0

" If ag is available use it as filename list generator instead of 'find'
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --ignore ''.git'' --ignore ''.DS_Store'' --ignore ''node_modules'' --hidden -g ""'
endif

"EasyAlign
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|>' },
\ '/': {
\     'pattern':         '//\+\|/\*\|\*/',
\     'delimiter_align': 'l',
\     'ignore_groups':   ['!Comment'] },
\ ']': {
\     'pattern':       '[[\]]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ ')': {
\     'pattern':       '[()]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ 'd': {
\     'pattern':      ' \(\S\+\s*[;=]\)\@=',
\     'left_margin':  0,
\     'right_margin': 0
\   }
\ }

"openbrowser
let g:netrw_nogx = 1 " disable netrw's gx mapping.
vmap gx <Plug>(openbrowser-open)
nmap gx <Plug>(ctrlp#myp4#P4ReviewLink)

"quick fix
nmap <C-@><C-P> :cp <CR>
nmap <C-@><C-N> :cn <CR>
nmap <C-@><C-L> :cl <CR>

"GTasg-CsCope
"GtagsCscope_Auto_Load 设置以后，会自动检测目录下是否有GTAGS文件，但是检测时候
"还没有跳转到工作目录，导致毕弹错误，这里就不强制跳转，等到最后在执行GTags的加载
let g:GtagsCscope_Auto_Load       = 0
let g:GtagsCscope_Auto_Map        = 1
let g:GtagsCscope_Use_Old_Key_Map = 1
let g:GtagsCscope_Ignore_Case     = 1
let g:GtagsCscope_Absolute_Path   = 1
let g:GtagsCscope_Keep_Alive      = 1

"vim lsp 相关配置
let g:lsp_auto_enable = 1
let g:lsp_log_file = expand('~/vim-lsp.log')
let g:asyncomplete_log_file=expand('~/vim-lsp-asynccomplete.log')

"自动命令
"其他命令
"最后
call pathogen#infect()
